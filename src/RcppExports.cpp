// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_get_nb_threads
int cpp_get_nb_threads();
RcppExport SEXP _DRDID_cpp_get_nb_threads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_get_nb_threads());
    return rcpp_result_gen;
END_RCPP
}
// cpppar_exp
NumericVector cpppar_exp(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_exp(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_exp(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_log
NumericVector cpppar_log(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_log(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_log(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_log_a_exp
NumericVector cpppar_log_a_exp(int nthreads, double a, NumericVector mu, NumericVector exp_mu);
RcppExport SEXP _DRDID_cpppar_log_a_exp(SEXP nthreadsSEXP, SEXP aSEXP, SEXP muSEXP, SEXP exp_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_log_a_exp(nthreads, a, mu, exp_mu));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_lgamma
NumericVector cpppar_lgamma(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_lgamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_lgamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_digamma
NumericVector cpppar_digamma(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_digamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_digamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_trigamma
NumericVector cpppar_trigamma(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_trigamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_trigamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_poisson_linkinv
NumericVector cpppar_poisson_linkinv(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_poisson_linkinv(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_poisson_linkinv(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_poisson_validmu
bool cpppar_poisson_validmu(SEXP x, int nthreads);
RcppExport SEXP _DRDID_cpppar_poisson_validmu(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_poisson_validmu(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_linkfun
NumericVector cpppar_logit_linkfun(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_logit_linkfun(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_linkfun(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_linkinv
NumericVector cpppar_logit_linkinv(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_logit_linkinv(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_linkinv(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_mueta
NumericVector cpppar_logit_mueta(NumericVector x, int nthreads);
RcppExport SEXP _DRDID_cpppar_logit_mueta(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_mueta(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_logit_devresids
NumericVector cpppar_logit_devresids(NumericVector y, NumericVector mu, NumericVector wt, int nthreads);
RcppExport SEXP _DRDID_cpppar_logit_devresids(SEXP ySEXP, SEXP muSEXP, SEXP wtSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_logit_devresids(y, mu, wt, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_xwy
NumericVector cpppar_xwy(NumericMatrix X, NumericVector y, NumericVector w, int nthreads);
RcppExport SEXP _DRDID_cpppar_xwy(SEXP XSEXP, SEXP ySEXP, SEXP wSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_xwy(X, y, w, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_xbeta
NumericVector cpppar_xbeta(NumericMatrix X, NumericVector beta, int nthreads);
RcppExport SEXP _DRDID_cpppar_xbeta(SEXP XSEXP, SEXP betaSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_xbeta(X, beta, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_matprod
NumericMatrix cpppar_matprod(NumericMatrix x, NumericMatrix y, int nthreads);
RcppExport SEXP _DRDID_cpppar_matprod(SEXP xSEXP, SEXP ySEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_matprod(x, y, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_which_na_inf_vec
List cpppar_which_na_inf_vec(SEXP x, int nthreads);
RcppExport SEXP _DRDID_cpppar_which_na_inf_vec(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_which_na_inf_vec(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_which_na_inf_mat
List cpppar_which_na_inf_mat(NumericMatrix mat, int nthreads);
RcppExport SEXP _DRDID_cpppar_which_na_inf_mat(SEXP matSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_which_na_inf_mat(mat, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_which_na_inf_df
List cpppar_which_na_inf_df(SEXP df, int nthreads);
RcppExport SEXP _DRDID_cpppar_which_na_inf_df(SEXP dfSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_which_na_inf_df(df, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_cond_means
List cpppar_cond_means(NumericMatrix mat_vars, IntegerVector treat, int nthreads);
RcppExport SEXP _DRDID_cpppar_cond_means(SEXP mat_varsSEXP, SEXP treatSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat_vars(mat_varsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_cond_means(mat_vars, treat, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_check_only_0
IntegerVector cpppar_check_only_0(NumericMatrix x_mat, int nthreads);
RcppExport SEXP _DRDID_cpppar_check_only_0(SEXP x_matSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x_mat(x_matSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_check_only_0(x_mat, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DRDID_cpp_get_nb_threads", (DL_FUNC) &_DRDID_cpp_get_nb_threads, 0},
    {"_DRDID_cpppar_exp", (DL_FUNC) &_DRDID_cpppar_exp, 2},
    {"_DRDID_cpppar_log", (DL_FUNC) &_DRDID_cpppar_log, 2},
    {"_DRDID_cpppar_log_a_exp", (DL_FUNC) &_DRDID_cpppar_log_a_exp, 4},
    {"_DRDID_cpppar_lgamma", (DL_FUNC) &_DRDID_cpppar_lgamma, 2},
    {"_DRDID_cpppar_digamma", (DL_FUNC) &_DRDID_cpppar_digamma, 2},
    {"_DRDID_cpppar_trigamma", (DL_FUNC) &_DRDID_cpppar_trigamma, 2},
    {"_DRDID_cpppar_poisson_linkinv", (DL_FUNC) &_DRDID_cpppar_poisson_linkinv, 2},
    {"_DRDID_cpppar_poisson_validmu", (DL_FUNC) &_DRDID_cpppar_poisson_validmu, 2},
    {"_DRDID_cpppar_logit_linkfun", (DL_FUNC) &_DRDID_cpppar_logit_linkfun, 2},
    {"_DRDID_cpppar_logit_linkinv", (DL_FUNC) &_DRDID_cpppar_logit_linkinv, 2},
    {"_DRDID_cpppar_logit_mueta", (DL_FUNC) &_DRDID_cpppar_logit_mueta, 2},
    {"_DRDID_cpppar_logit_devresids", (DL_FUNC) &_DRDID_cpppar_logit_devresids, 4},
    {"_DRDID_cpppar_xwy", (DL_FUNC) &_DRDID_cpppar_xwy, 4},
    {"_DRDID_cpppar_xbeta", (DL_FUNC) &_DRDID_cpppar_xbeta, 3},
    {"_DRDID_cpppar_matprod", (DL_FUNC) &_DRDID_cpppar_matprod, 3},
    {"_DRDID_cpppar_which_na_inf_vec", (DL_FUNC) &_DRDID_cpppar_which_na_inf_vec, 2},
    {"_DRDID_cpppar_which_na_inf_mat", (DL_FUNC) &_DRDID_cpppar_which_na_inf_mat, 2},
    {"_DRDID_cpppar_which_na_inf_df", (DL_FUNC) &_DRDID_cpppar_which_na_inf_df, 2},
    {"_DRDID_cpppar_cond_means", (DL_FUNC) &_DRDID_cpppar_cond_means, 3},
    {"_DRDID_cpppar_check_only_0", (DL_FUNC) &_DRDID_cpppar_check_only_0, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_DRDID(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
